{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled15.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kushall07/assignment-1/blob/master/kushall07/assignment-2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qb50e5pBWKCR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np  \n",
        " "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HAm-dgJUWUVc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X=np.array([[1,0,1,0],[1,0,1,1],[0,1,0,1]])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KhJrviaJXNHr",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y=np.array([[1],[1],[0]])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "49ID3G1AXPH7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Sigmoid Function\n",
        "def sigmoid (x):\n",
        "  return 1/(1 + np.exp(-x))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ctDkcL0bXRRT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Derivative of Sigmoid Function\n",
        "def derivatives_sigmoid(x):\n",
        "  return x * (1 - x)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8IXBNeGLXYEA",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "epoch=100 #Setting training iterations\n",
        "lr=0.1 #Setting learning rate\n",
        "inputlayer_neurons = X.shape[1] #number of features in data set\n",
        "hiddenlayer_neurons = 3 #number of hidden layers neurons\n",
        "output_neurons = 1 #number of neurons at output layer"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EHm2VMvVXdWW",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "wh=np.random.uniform(size=(inputlayer_neurons,hiddenlayer_neurons))\n",
        "bh=np.random.uniform(size=(1,hiddenlayer_neurons))\n",
        "wout=np.random.uniform(size=(hiddenlayer_neurons,output_neurons))\n",
        "bout=np.random.uniform(size=(1,output_neurons))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3n9a21xkXfcw",
        "colab_type": "code",
        "outputId": "77db829c-8af1-43ff-f318-322822c81c69",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 5297
        }
      },
      "source": [
        "for i in range(epoch):\n",
        "\n",
        "  #Forward Propogation\n",
        "  hidden_layer_input1=np.dot(X,wh)\n",
        "  hidden_layer_input=hidden_layer_input1 + bh\n",
        "  hiddenlayer_activations = sigmoid(hidden_layer_input)\n",
        "  output_layer_input1=np.dot(hiddenlayer_activations,wout)\n",
        "  output_layer_input= output_layer_input1+ bout\n",
        "  output = sigmoid(output_layer_input)\n",
        "\n",
        "#Backpropagation\n",
        "  E = y-output\n",
        "  slope_output_layer = derivatives_sigmoid(output)\n",
        "  slope_hidden_layer = derivatives_sigmoid(hiddenlayer_activations)\n",
        "  d_output = E * slope_output_layer\n",
        "  Error_at_hidden_layer = d_output.dot(wout.T)\n",
        "  d_hiddenlayer = Error_at_hidden_layer * slope_hidden_layer\n",
        "  wout += hiddenlayer_activations.T.dot(d_output) *lr\n",
        "  bout += np.sum(d_output, axis=0,keepdims=True) *lr\n",
        "  wh += X.T.dot(d_hiddenlayer) *lr\n",
        "  bh += np.sum(d_hiddenlayer, axis=0,keepdims=True) *lr\n",
        "\n",
        "  print(output)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0.7822203 ]\n",
            " [0.80634748]\n",
            " [0.80154041]]\n",
            "[[0.77939081]\n",
            " [0.80349262]\n",
            " [0.79863101]]\n",
            "[[0.77657325]\n",
            " [0.80064374]\n",
            " [0.79572604]]\n",
            "[[0.77377031]\n",
            " [0.79780362]\n",
            " [0.79282821]]\n",
            "[[0.77098462]\n",
            " [0.79497502]\n",
            " [0.7899402 ]]\n",
            "[[0.76821877]\n",
            " [0.79216068]\n",
            " [0.78706466]]\n",
            "[[0.76547532]\n",
            " [0.78936332]\n",
            " [0.78420421]]\n",
            "[[0.76275675]\n",
            " [0.78658558]\n",
            " [0.78136144]]\n",
            "[[0.76006547]\n",
            " [0.78383005]\n",
            " [0.77853884]]\n",
            "[[0.7574038 ]\n",
            " [0.78109927]\n",
            " [0.77573887]]\n",
            "[[0.75477399]\n",
            " [0.77839565]\n",
            " [0.77296388]]\n",
            "[[0.75217816]\n",
            " [0.77572156]\n",
            " [0.77021616]]\n",
            "[[0.74961834]\n",
            " [0.77307922]\n",
            " [0.76749787]]\n",
            "[[0.74709643]\n",
            " [0.77047078]\n",
            " [0.76481109]]\n",
            "[[0.74461422]\n",
            " [0.76789824]\n",
            " [0.76215776]]\n",
            "[[0.74217338]\n",
            " [0.76536349]\n",
            " [0.75953973]]\n",
            "[[0.73977543]\n",
            " [0.7628683 ]\n",
            " [0.7569587 ]]\n",
            "[[0.73742177]\n",
            " [0.76041429]\n",
            " [0.75441626]]\n",
            "[[0.73511367]\n",
            " [0.75800296]\n",
            " [0.75191385]]\n",
            "[[0.73285224]\n",
            " [0.75563566]\n",
            " [0.74945281]]\n",
            "[[0.73063848]\n",
            " [0.7533136 ]\n",
            " [0.74703431]]\n",
            "[[0.72847326]\n",
            " [0.75103787]\n",
            " [0.74465942]]\n",
            "[[0.72635728]\n",
            " [0.74880939]\n",
            " [0.74232904]]\n",
            "[[0.72429116]\n",
            " [0.74662899]\n",
            " [0.74004397]]\n",
            "[[0.72227535]\n",
            " [0.74449731]\n",
            " [0.73780487]]\n",
            "[[0.72031021]\n",
            " [0.74241491]\n",
            " [0.73561228]]\n",
            "[[0.71839595]\n",
            " [0.7403822 ]\n",
            " [0.7334666 ]]\n",
            "[[0.71653269]\n",
            " [0.73839946]\n",
            " [0.73136814]]\n",
            "[[0.71472043]\n",
            " [0.73646687]\n",
            " [0.72931708]]\n",
            "[[0.71295908]\n",
            " [0.73458449]\n",
            " [0.72731349]]\n",
            "[[0.71124843]\n",
            " [0.73275228]\n",
            " [0.72535735]]\n",
            "[[0.70958819]\n",
            " [0.73097008]\n",
            " [0.72344853]]\n",
            "[[0.70797799]\n",
            " [0.72923766]\n",
            " [0.72158682]]\n",
            "[[0.70641737]\n",
            " [0.72755469]\n",
            " [0.71977192]]\n",
            "[[0.7049058 ]\n",
            " [0.72592076]\n",
            " [0.71800344]]\n",
            "[[0.70344269]\n",
            " [0.72433537]\n",
            " [0.71628094]]\n",
            "[[0.70202738]\n",
            " [0.72279798]\n",
            " [0.71460389]]\n",
            "[[0.70065915]\n",
            " [0.72130796]\n",
            " [0.71297172]]\n",
            "[[0.69933724]\n",
            " [0.71986464]\n",
            " [0.71138377]]\n",
            "[[0.69806084]\n",
            " [0.71846727]\n",
            " [0.70983937]]\n",
            "[[0.6968291 ]\n",
            " [0.71711509]\n",
            " [0.70833777]]\n",
            "[[0.69564114]\n",
            " [0.71580727]\n",
            " [0.70687821]]\n",
            "[[0.69449606]\n",
            " [0.71454297]\n",
            " [0.70545988]]\n",
            "[[0.6933929 ]\n",
            " [0.71332129]\n",
            " [0.70408194]]\n",
            "[[0.69233073]\n",
            " [0.71214133]\n",
            " [0.70274352]]\n",
            "[[0.69130856]\n",
            " [0.71100216]\n",
            " [0.70144373]]\n",
            "[[0.69032541]\n",
            " [0.70990281]\n",
            " [0.70018168]]\n",
            "[[0.68938029]\n",
            " [0.70884234]\n",
            " [0.69895645]]\n",
            "[[0.68847221]\n",
            " [0.70781976]\n",
            " [0.6977671 ]]\n",
            "[[0.68760015]\n",
            " [0.7068341 ]\n",
            " [0.69661271]]\n",
            "[[0.68676312]\n",
            " [0.70588437]\n",
            " [0.69549234]]\n",
            "[[0.68596013]\n",
            " [0.70496959]\n",
            " [0.69440504]]\n",
            "[[0.68519017]\n",
            " [0.70408878]\n",
            " [0.69334989]]\n",
            "[[0.68445228]\n",
            " [0.70324096]\n",
            " [0.69232595]]\n",
            "[[0.68374548]\n",
            " [0.70242517]\n",
            " [0.69133228]]\n",
            "[[0.6830688 ]\n",
            " [0.70164043]\n",
            " [0.69036798]]\n",
            "[[0.68242129]\n",
            " [0.70088581]\n",
            " [0.68943213]]\n",
            "[[0.68180203]\n",
            " [0.70016036]\n",
            " [0.68852383]]\n",
            "[[0.68121009]\n",
            " [0.69946317]\n",
            " [0.68764219]]\n",
            "[[0.68064458]\n",
            " [0.69879331]\n",
            " [0.68678635]]\n",
            "[[0.6801046 ]\n",
            " [0.69814991]\n",
            " [0.68595545]]\n",
            "[[0.67958929]\n",
            " [0.69753207]\n",
            " [0.68514864]]\n",
            "[[0.67909781]\n",
            " [0.69693896]\n",
            " [0.68436509]]\n",
            "[[0.67862932]\n",
            " [0.69636972]\n",
            " [0.68360401]]\n",
            "[[0.67818303]\n",
            " [0.69582353]\n",
            " [0.6828646 ]]\n",
            "[[0.67775814]\n",
            " [0.6952996 ]\n",
            " [0.68214608]]\n",
            "[[0.67735389]\n",
            " [0.69479715]\n",
            " [0.68144771]]\n",
            "[[0.67696953]\n",
            " [0.69431541]\n",
            " [0.68076875]]\n",
            "[[0.67660433]\n",
            " [0.69385364]\n",
            " [0.68010847]]\n",
            "[[0.67625761]\n",
            " [0.69341112]\n",
            " [0.67946619]]\n",
            "[[0.67592866]\n",
            " [0.69298715]\n",
            " [0.67884122]]\n",
            "[[0.67561683]\n",
            " [0.69258106]\n",
            " [0.67823291]]\n",
            "[[0.67532147]\n",
            " [0.69219218]\n",
            " [0.67764061]]\n",
            "[[0.67504197]\n",
            " [0.69181988]\n",
            " [0.6770637 ]]\n",
            "[[0.67477772]\n",
            " [0.69146352]\n",
            " [0.67650159]]\n",
            "[[0.67452813]\n",
            " [0.69112253]\n",
            " [0.67595367]]\n",
            "[[0.67429266]\n",
            " [0.6907963 ]\n",
            " [0.67541939]]\n",
            "[[0.67407074]\n",
            " [0.69048429]\n",
            " [0.6748982 ]]\n",
            "[[0.67386185]\n",
            " [0.69018594]\n",
            " [0.67438957]]\n",
            "[[0.6736655 ]\n",
            " [0.68990074]\n",
            " [0.67389297]]\n",
            "[[0.67348118]\n",
            " [0.68962818]\n",
            " [0.67340792]]\n",
            "[[0.67330843]\n",
            " [0.68936777]\n",
            " [0.67293393]]\n",
            "[[0.67314679]\n",
            " [0.68911903]\n",
            " [0.67247054]]\n",
            "[[0.67299582]\n",
            " [0.68888151]\n",
            " [0.67201729]]\n",
            "[[0.6728551 ]\n",
            " [0.68865478]\n",
            " [0.67157376]]\n",
            "[[0.67272423]\n",
            " [0.68843841]\n",
            " [0.67113952]]\n",
            "[[0.6726028 ]\n",
            " [0.68823199]\n",
            " [0.67071417]]\n",
            "[[0.67249046]\n",
            " [0.68803514]\n",
            " [0.67029731]]\n",
            "[[0.67238682]\n",
            " [0.68784746]\n",
            " [0.66988858]]\n",
            "[[0.67229155]\n",
            " [0.68766861]\n",
            " [0.66948761]]\n",
            "[[0.67220432]\n",
            " [0.68749823]\n",
            " [0.66909405]]\n",
            "[[0.67212479]\n",
            " [0.68733598]\n",
            " [0.66870756]]\n",
            "[[0.67205266]\n",
            " [0.68718155]\n",
            " [0.66832781]]\n",
            "[[0.67198763]\n",
            " [0.68703462]\n",
            " [0.66795449]]\n",
            "[[0.67192943]\n",
            " [0.68689489]\n",
            " [0.66758729]]\n",
            "[[0.67187777]\n",
            " [0.68676208]\n",
            " [0.66722594]]\n",
            "[[0.6718324 ]\n",
            " [0.68663591]\n",
            " [0.66687014]]\n",
            "[[0.67179305]\n",
            " [0.68651612]\n",
            " [0.66651962]]\n",
            "[[0.67175951]\n",
            " [0.68640246]\n",
            " [0.66617412]]\n",
            "[[0.67173152]\n",
            " [0.68629467]\n",
            " [0.66583339]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fNWxta4RXlpL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}